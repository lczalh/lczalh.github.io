<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lczalh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-22T08:26:04.329Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Liu Chao Zheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MAC 安装Tomcat</title>
    <link href="http://yoursite.com/2019/04/18/2019-4-18%20MAC%20%E5%AE%89%E8%A3%85Tomcat/"/>
    <id>http://yoursite.com/2019/04/18/2019-4-18 MAC 安装Tomcat/</id>
    <published>2019-04-18T07:13:50.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载Tomcat-如图"><a href="#1-下载Tomcat-如图" class="headerlink" title="1. 下载Tomcat 如图"></a>1. 下载<a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">Tomcat</a> 如图</h2><p><img src="https://github.com/lczalh/blog/blob/master/source/images/MAC 安装Tomcat/下载Tomcat.png?raw=true" alt="markdown" title="下载Tomcat"></p><h2 id="2-解压并用重命名为Tomcat"><a href="#2-解压并用重命名为Tomcat" class="headerlink" title="2. 解压并用重命名为Tomcat"></a>2. 解压并用重命名为Tomcat</h2><h2 id="3-用终端-Terminal-进入-cd-Tomcat-bin"><a href="#3-用终端-Terminal-进入-cd-Tomcat-bin" class="headerlink" title="3. 用终端(Terminal) 进入 $ cd Tomcat/bin"></a>3. 用终端(Terminal) 进入 <code>$ cd Tomcat/bin</code></h2><h2 id="4-启动Tomcat-sudo-startup-sh"><a href="#4-启动Tomcat-sudo-startup-sh" class="headerlink" title="4. 启动Tomcat $ sudo ./startup.sh"></a>4. 启动Tomcat <code>$ sudo ./startup.sh</code></h2><p><img src="https://github.com/lczalh/blog/blob/master/source/images/MAC 安装Tomcat/启动.png?raw=true" alt="markdown" title="启动"></p><h2 id="5-关闭Tomcat-shutdown-sh"><a href="#5-关闭Tomcat-shutdown-sh" class="headerlink" title="5. 关闭Tomcat $ ./shutdown.sh"></a>5. 关闭Tomcat <code>$ ./shutdown.sh</code></h2><p><img src="https://github.com/lczalh/blog/blob/master/source/images/MAC 安装Tomcat/关闭.png?raw=true" alt="markdown" title="关闭"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-下载Tomcat-如图&quot;&gt;&lt;a href=&quot;#1-下载Tomcat-如图&quot; class=&quot;headerlink&quot; title=&quot;1. 下载Tomcat 如图&quot;&gt;&lt;/a&gt;1. 下载&lt;a href=&quot;https://tomcat.apache.org/downlo
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MAC 显示或隐藏.git目录</title>
    <link href="http://yoursite.com/2019/04/17/2019-4-17%20MAC%20%E6%98%BE%E7%A4%BA%E6%88%96%E9%9A%90%E8%97%8F.git%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2019/04/17/2019-4-17 MAC 显示或隐藏.git目录/</id>
    <published>2019-04-17T03:08:22.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-显示-git目录：-defaults-write-com-apple-finder-AppleShowAllFiles-TRUE"><a href="#1-显示-git目录：-defaults-write-com-apple-finder-AppleShowAllFiles-TRUE" class="headerlink" title="1. 显示.git目录：$ defaults write com.apple.finder AppleShowAllFiles TRUE"></a>1. 显示.git目录：<code>$ defaults write com.apple.finder AppleShowAllFiles TRUE</code></h2><h2 id="2-隐藏-git目录：-defaults-write-com-apple-finder-AppleShowAllFiles-FALSE"><a href="#2-隐藏-git目录：-defaults-write-com-apple-finder-AppleShowAllFiles-FALSE" class="headerlink" title="2. 隐藏.git目录：$ defaults write com.apple.finder AppleShowAllFiles FALSE"></a>2. 隐藏.git目录：<code>$ defaults write com.apple.finder AppleShowAllFiles FALSE</code></h2><h2 id="3-重启Finder：-killall-Finder"><a href="#3-重启Finder：-killall-Finder" class="headerlink" title="3. 重启Finder：$ killall Finder"></a>3. 重启Finder：<code>$ killall Finder</code></h2><h2 id="4-当你的git仓库中还存在另一个git仓库B，提交时报错changes-not-staged-for-commit，解决方法：进入仓库B中删除-git文件夹，在回到仓库根目录重新提交代码即可"><a href="#4-当你的git仓库中还存在另一个git仓库B，提交时报错changes-not-staged-for-commit，解决方法：进入仓库B中删除-git文件夹，在回到仓库根目录重新提交代码即可" class="headerlink" title="4. 当你的git仓库中还存在另一个git仓库B，提交时报错changes not staged for commit，解决方法：进入仓库B中删除.git文件夹，在回到仓库根目录重新提交代码即可"></a>4. 当你的git仓库中还存在另一个git仓库B，提交时报错<code>changes not staged for commit</code>，解决方法：进入仓库B中删除.git文件夹，在回到仓库根目录重新提交代码即可</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-显示-git目录：-defaults-write-com-apple-finder-AppleShowAllFiles-TRUE&quot;&gt;&lt;a href=&quot;#1-显示-git目录：-defaults-write-com-apple-finder-AppleShowA
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的基本使用</title>
    <link href="http://yoursite.com/2019/04/16/2019-4-16%20MySQL/"/>
    <id>http://yoursite.com/2019/04/16/2019-4-16 MySQL/</id>
    <published>2019-04-16T12:48:01.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/lczalh/blog/blob/master/source/images/MySQL/数据类型.png?raw=true" alt="markdown" title="数据类型"></p><h2 id="1-DDL（数据定义语言）"><a href="#1-DDL（数据定义语言）" class="headerlink" title="1. DDL（数据定义语言）"></a>1. DDL（数据定义语言）</h2><h3 id="1-1-操作数据库"><a href="#1-1-操作数据库" class="headerlink" title="1.1 操作数据库"></a>1.1 操作数据库</h3><h4 id="1-1-1-增"><a href="#1-1-1-增" class="headerlink" title="1.1.1 增"></a>1.1.1 增</h4><p>创建数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方式一：CREATE DATABASE 数据库名; -- 例：CREATE DATABASE mysql;</span><br><span class="line">方式二：CREATE DATABASE 数据库名 CHARSET 编码; -- 例：CREATE DATABASE mysql CHARSET utf8;</span><br></pre></td></tr></table></figure></p><h4 id="1-1-2-删"><a href="#1-1-2-删" class="headerlink" title="1.1.2 删"></a>1.1.2 删</h4><p>删除数据库：<code>DROP DATABASE 数据库名; -- 例：DROP DATABASE mysql;</code></p><h4 id="1-1-3-改"><a href="#1-1-3-改" class="headerlink" title="1.1.3 改"></a>1.1.3 改</h4><p>修改正在使用的数据库：<code>USE 数据库名; -- 例：USE mysql;</code></p><h4 id="1-1-4-查"><a href="#1-1-4-查" class="headerlink" title="1.1.4 查"></a>1.1.4 查</h4><p>查询正在使用的数据库：<code>SELECT DATABASE();</code><br>查询mysql中的所有数据库：<code>SHOW DATABASES;</code><br>查询某一个数据库的详细信息：<code>SHOW CREATE DATABASE 数据库名; -- 例：SHOW CREATE DATABASE  mysql;</code></p><h3 id="1-2-操作数据库表"><a href="#1-2-操作数据库表" class="headerlink" title="1.2 操作数据库表"></a>1.2 操作数据库表</h3><h4 id="1-2-1-增"><a href="#1-2-1-增" class="headerlink" title="1.2.1 增"></a>1.2.1 增</h4><p>创建表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 数据库名(</span><br><span class="line">    字段名 数据类型(长度) 约束,</span><br><span class="line">    字段名 数据类型(长度) 约束</span><br><span class="line">);</span><br><span class="line">例：</span><br><span class="line">CREATE TABLE student(</span><br><span class="line">    sid INT PRIMARY KEY, -- 主键约束</span><br><span class="line">    sname VARCHAR(30),</span><br><span class="line">    sage INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h4 id="1-2-2-删"><a href="#1-2-2-删" class="headerlink" title="1.2.2 删"></a>1.2.2 删</h4><p>删除表：<code>DROP TABLE 表名; -- 例：DROP TABLE student;</code></p><h4 id="1-2-3-查"><a href="#1-2-3-查" class="headerlink" title="1.2.3 查"></a>1.2.3 查</h4><p>查看一个表的详细信息：<code>DESC 表名; -- 例：DESC student;</code><br>查看所有表：<code>SHOW TABLES;</code></p><h4 id="1-2-4-改"><a href="#1-2-4-改" class="headerlink" title="1.2.4 改"></a>1.2.4 改</h4><p>修改表名：<code>RENAME TABLE 表名 TO 新表名; -- 例：RENAME TABLE student TO studentTwo;</code></p><h3 id="1-3-操作数据库表结构"><a href="#1-3-操作数据库表结构" class="headerlink" title="1.3 操作数据库表结构"></a>1.3 操作数据库表结构</h3><h4 id="1-3-1-增"><a href="#1-3-1-增" class="headerlink" title="1.3.1 增"></a>1.3.1 增</h4><p>向表中增加一列：<code>ALTER TABLE 表名 ADD 字段名 数据类型(长度) 约束; -- 例：ALTER TABLE student ADD phone VARCHAR(30);</code></p><h4 id="1-3-2-删"><a href="#1-3-2-删" class="headerlink" title="1.3.2 删"></a>1.3.2 删</h4><p>向表中删除一列：<code>ALTER TABLE 表名 DROP 字段名; -- 例：ALTER TABLE student DROP phone;</code></p><h4 id="1-3-3-改"><a href="#1-3-3-改" class="headerlink" title="1.3.3 改"></a>1.3.3 改</h4><p>修改表中的字段名：<code>ALTER TABLE 表名 CHANGE 字段名 新字段名 数据类型(长度) 约束; -- 例：ALTER TABLE student CHANGE sname mname VARCHAR(30);</code><br>修改表中的字段中的变量类型和约束：<code>ALTER TABLE 表名 MODIFY 字段名 数据类型(长度) 约束; -- 例：ALTER TABLE student MODIFY sname VARCHAR(10);</code><br>修改表的字符集：<code>ALTER TABLE 表名 CHARACYER SET 编码; -- 例：ALTER TABLE student CHARACYER SET utf8;</code></p><h2 id="2-DML（数据操作语言）"><a href="#2-DML（数据操作语言）" class="headerlink" title="2. DML（数据操作语言）"></a>2. DML（数据操作语言）</h2><h3 id="2-1-增"><a href="#2-1-增" class="headerlink" title="2.1 增"></a>2.1 增</h3><p>向表中插入一条数据（向表中插入所有字段可省略字段名）：<code>INSERT INFO 表名 (字段1，字段2) VALUES (值1，值2); -- 例：INSERT INFO student (name，age) VALUES (&#39;张三&#39;，18);</code> </p><h3 id="2-2-删"><a href="#2-2-删" class="headerlink" title="2.2 删"></a>2.2 删</h3><p>删除表中的所有记录：<code>DELETE FROM 表名; -- 例：DELETE FROM student;</code><br>删除表中的某一条数据：<code>DELETE FROM 表名 WHERE 条件; -- 例：DELETE FROM student WHERE name=&#39;张三&#39;;</code></p><h3 id="2-3-改"><a href="#2-3-改" class="headerlink" title="2.3 改"></a>2.3 改</h3><p>修改表中所有指定字段的信息：<code>UPDATE 表名 SET 字段名=&#39;值&#39;; -- 例：UPDATE student SET name=&#39;李四&#39;;</code><br>修改表中某一条数据的字段信息：<code>UPDATE 表名 SET 字段名=&#39;值&#39; WHERE 条件; -- 例：UPDATE student SET name=&#39;李四&#39; WHERE age=18;</code>  </p><h2 id="3-约束"><a href="#3-约束" class="headerlink" title="3. 约束"></a>3. 约束</h2><p>主键约束（修饰的字段必须唯一且不能为空）：<code>PRIMARY KEY</code><br>自动增长约束：<code>AUTO_INCREMENT</code></p><h2 id="4-删除表所有数据的两种方式"><a href="#4-删除表所有数据的两种方式" class="headerlink" title="4. 删除表所有数据的两种方式"></a>4. 删除表所有数据的两种方式</h2><p>方式一：<code>DELETE FROM 表名; -- 例：DELETE FROM student;</code>（但是自动增长的值不会重置为1）<br>方式二：<code>TRUNCATE TABLE 表名; -- 例：TRUNCATE TABLE student;</code>（先摧毁表，在重建表；自动增长的值会重置为1）</p><h2 id="5-DQL（数据查询语言）"><a href="#5-DQL（数据查询语言）" class="headerlink" title="5. DQL（数据查询语言）"></a>5. DQL（数据查询语言）</h2><p><img src="https://github.com/lczalh/blog/blob/master/source/images/MySQL/运算符.png?raw=true" alt="markdown" title="运算符"><br>查询表中所有的数据：<code>SELECT * FROM 表名; -- 例：SELECT * FROM student;</code><br>查询表中某个字段的数据：<code>SELECT 字段名1,字段名2 FROM 表名; -- 例：SELECT name FROM student;</code><br>查询表中某个字段的数据并去重（存在多个字段时字段名1且字段名2相同时才会去重）：<code>SELECT DISTINCT 字段名1,字段名2 FROM 表名; -- 例：SELECT DISTINCT name FROM student;</code><br>别名查询：<code>SELECT 字段名 AS 别名 FROM student; -- 例：SELECT name AS 姓名 FROM student;</code><br>查询表中某个字段的所有数据：<code>SELECT * FROM 表名 WHERE 条件; -- 例：SELECT * FROM student WHERE name=&#39;张三&#39;;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/lczalh/blog/blob/master/source/images/MySQL/数据类型.png?raw=true&quot; alt=&quot;markdown&quot; title=&quot;数据类型&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-DD
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>iOS RxDataSources</title>
    <link href="http://yoursite.com/2019/04/02/2019-4-02%20iOS%E5%BC%80%E5%8F%91%20RxDataSources/"/>
    <id>http://yoursite.com/2019/04/02/2019-4-02 iOS开发 RxDataSources/</id>
    <published>2019-04-02T02:48:47.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<p>RxDataSource 的本质就是使用 RxSwift 对 UITableView 和 UICollectionView 的数据源做了一层包装</p><h2 id="1-UITableView"><a href="#1-UITableView" class="headerlink" title="1. UITableView"></a>1. UITableView</h2><p>数据源类型：<code>RxTableViewSectionedReloadDataSource</code>，<code>RxTableViewSectionedAnimatedDataSource</code></p><h2 id="2-UICollectionView"><a href="#2-UICollectionView" class="headerlink" title="2. UICollectionView"></a>2. UICollectionView</h2><p>数据源类型：<code>RxTableViewSectionedReloadDataSource</code>，<code>RxCollectionViewSectionedAnimatedDataSource</code></p><h2 id="3-ModelType"><a href="#3-ModelType" class="headerlink" title="3. ModelType"></a>3. ModelType</h2><p>模型类型：<code>SectionModel</code>，<code>AnimatableSectionModel</code></p><h2 id="4-使用动画数据源，自定义模型需遵守IdentifiableType协议"><a href="#4-使用动画数据源，自定义模型需遵守IdentifiableType协议" class="headerlink" title="4. 使用动画数据源，自定义模型需遵守IdentifiableType协议"></a>4. 使用动画数据源，自定义模型需遵守<code>IdentifiableType</code>协议</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class NewsListModel: Object,Mappable &#123;</span><br><span class="line">    @objc dynamic var publishTime: String? // 发布时间</span><br><span class="line">    @objc dynamic var category: String? // 类型</span><br><span class="line">    @objc dynamic var source: String? // 来源</span><br><span class="line">    @objc dynamic var newsId: String? // 新闻ID</span><br><span class="line">    @objc dynamic var title: String? // 标题</span><br><span class="line">    @objc dynamic var newsImg: String? //新闻小图片url</span><br><span class="line"></span><br><span class="line">    required convenience init?(map: Map) &#123;</span><br><span class="line">        self.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func mapping(map: Map) &#123;</span><br><span class="line">        publishTime   &lt;- map[&quot;publishTime&quot;]</span><br><span class="line">        category   &lt;- map[&quot;category&quot;]</span><br><span class="line">        source   &lt;- map[&quot;source&quot;]</span><br><span class="line">        newsId   &lt;- map[&quot;newsId&quot;]</span><br><span class="line">        title   &lt;- map[&quot;title&quot;]</span><br><span class="line">        newsImg   &lt;- map[&quot;newsImg&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension NewsListModel: IdentifiableType &#123;</span><br><span class="line">    var identity: NewsListModel &#123;</span><br><span class="line">    return self</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    typealias Identity = NewsListModel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Demo"><a href="#5-Demo" class="headerlink" title="5. Demo"></a>5. <a href="https://github.com/lczalh/Diary" target="_blank" rel="noopener">Demo</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RxDataSource 的本质就是使用 RxSwift 对 UITableView 和 UICollectionView 的数据源做了一层包装&lt;/p&gt;
&lt;h2 id=&quot;1-UITableView&quot;&gt;&lt;a href=&quot;#1-UITableView&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS Alamofire实时检测网络状态</title>
    <link href="http://yoursite.com/2019/03/28/2019-3-28%20iOS%E5%BC%80%E5%8F%91%20%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2019/03/28/2019-3-28 iOS开发 实时检测网络状态/</id>
    <published>2019-03-28T01:43:23.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<p>实时检测网络状态</p><h2 id="1-创建全局NetworkReachabilityManager对象"><a href="#1-创建全局NetworkReachabilityManager对象" class="headerlink" title="1. 创建全局NetworkReachabilityManager对象"></a>1. 创建全局NetworkReachabilityManager对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let newsHomeNetworkReachabilityManager = NetworkReachabilityManager(host: &quot;http://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure><h2 id="2-开启网络监控"><a href="#2-开启网络监控" class="headerlink" title="2. 开启网络监控"></a>2. 开启网络监控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsHomeNetworkReachabilityManager?.startListening()</span><br></pre></td></tr></table></figure><h2 id="3-监听网络变化"><a href="#3-监听网络变化" class="headerlink" title="3. 监听网络变化"></a>3. 监听网络变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">newsHomeNetworkReachabilityManager?.listener = &#123; state in</span><br><span class="line">    switch state &#123;</span><br><span class="line">        case .unknown:</span><br><span class="line">            LCZProgressHUD.showError(title: &quot;似乎与网络断开了连接!&quot;)</span><br><span class="line">            break</span><br><span class="line">        case .notReachable:</span><br><span class="line">            LCZProgressHUD.showError(title: &quot;似乎与网络断开了连接!&quot;)</span><br><span class="line">            break</span><br><span class="line">        case .reachable(_):</span><br><span class="line">            break</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-不需要时停止监控"><a href="#4-不需要时停止监控" class="headerlink" title="4. 不需要时停止监控"></a>4. 不需要时停止监控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newsHomeNetworkReachabilityManager?.stopListening()</span><br></pre></td></tr></table></figure><h2 id="5-其它常用属性"><a href="#5-其它常用属性" class="headerlink" title="5. 其它常用属性"></a>5. 其它常用属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">open var isReachable: Bool // 当前网络是蜂窝网络或者是WiFi连接</span><br><span class="line"></span><br><span class="line">open var isReachableOnWWAN: Bool // 当前网络是通过蜂窝网络连接</span><br><span class="line"></span><br><span class="line">open var isReachableOnEthernetOrWiFi: Bool // 当前网络是通过WiFi网络连接</span><br><span class="line"></span><br><span class="line">open var networkReachabilityStatus: NetworkReachabilityStatus // 当前网络状态</span><br></pre></td></tr></table></figure><h2 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h2><h3 id="6-1-NetworkReachabilityManager不能为局部变量-否则会提前释放"><a href="#6-1-NetworkReachabilityManager不能为局部变量-否则会提前释放" class="headerlink" title="6.1 NetworkReachabilityManager不能为局部变量,否则会提前释放"></a>6.1 NetworkReachabilityManager不能为局部变量,否则会提前释放</h3><h3 id="6-2-每次使用需new一个新的newsHomeNetworkReachabilityManager-否则只响应最后监控回调"><a href="#6-2-每次使用需new一个新的newsHomeNetworkReachabilityManager-否则只响应最后监控回调" class="headerlink" title="6.2 每次使用需new一个新的newsHomeNetworkReachabilityManager,否则只响应最后监控回调"></a>6.2 每次使用需new一个新的newsHomeNetworkReachabilityManager,否则只响应最后监控回调</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实时检测网络状态&lt;/p&gt;
&lt;h2 id=&quot;1-创建全局NetworkReachabilityManager对象&quot;&gt;&lt;a href=&quot;#1-创建全局NetworkReachabilityManager对象&quot; class=&quot;headerlink&quot; title=&quot;1. 创建全局N
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 记录</title>
    <link href="http://yoursite.com/2019/03/07/2019-3-07%20iOS%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/03/07/2019-3-07 iOS开发记录/</id>
    <published>2019-03-07T06:43:45.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<p>记录点常用方法、属性以及遇到的问题</p><h2 id="1-GCD信号量"><a href="#1-GCD信号量" class="headerlink" title="1. GCD信号量"></a>1. GCD信号量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//创建信号量</span><br><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);</span><br><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    // 等待信号量</span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    // 发起网络请求</span><br><span class="line">    [BadgeCountModel HomeBadgeCountBlock:^(NSDictionary *data) &#123;</span><br><span class="line">        NSNumber *num = data[@&quot;num&quot;];</span><br><span class="line">        if (num.integerValue &gt; 0 ) &#123;</span><br><span class="line">            weakSelf.rightBt.isShowBadge = YES;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            weakSelf.rightBt.isShowBadge = NO;</span><br><span class="line">        &#125;</span><br><span class="line">        // 发送信号量</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125; andError:^(NSError *error) &#123;</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;]; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    // 发起网络请求</span><br><span class="line">    [BadgeCountModel HomeDetailBadgeCountBlock:^(NSArray *data) &#123;</span><br><span class="line">        if (!weakSelf.badgeDict) &#123;</span><br><span class="line">            weakSelf.badgeDict = [NSMutableDictionary dictionary];</span><br><span class="line">        &#125;</span><br><span class="line">        [weakSelf.badgeDict removeAllObjects];</span><br><span class="line">        NSMutableArray *badgeArray = [NSMutableArray array];</span><br><span class="line">        for (NSDictionary *dict in data) &#123;</span><br><span class="line">            BadgeCountModel *model = [[BadgeCountModel alloc] init];</span><br><span class="line">            model.code = [NSString stringWithFormat:@&quot;%@&quot;,dict[@&quot;key&quot;]];</span><br><span class="line">            model.value = [NSString stringWithFormat:@&quot;%@&quot;,dict[@&quot;value&quot;]];</span><br><span class="line">            [badgeArray addObject:model];</span><br><span class="line">            NSIndexPath *path = [self getIndexPathWithCode:model.code];</span><br><span class="line">            if (!path) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            [weakSelf.badgeDict setObject:model.value forKey:path];</span><br><span class="line">        &#125;</span><br><span class="line">        [weakSelf.collectionView reloadData];</span><br><span class="line">        [[GLMenuManager shareInstance] setRedPointArray:badgeArray];</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125; andError:^(NSError *error) &#123;</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-隐藏UITabBarController上的按钮"><a href="#2-隐藏UITabBarController上的按钮" class="headerlink" title="2. 隐藏UITabBarController上的按钮"></a>2. 隐藏UITabBarController上的按钮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 方法</span><br><span class="line">- (void)hideContentController:(UIViewController*)content&#123;</span><br><span class="line">    [content willMoveToParentViewController:nil];// 1</span><br><span class="line">    [content.view removeFromSuperview];// 2</span><br><span class="line">    [content removeFromParentViewController];// 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">[self hideContentController:self.tabBarController.viewControllers[0]];</span><br></pre></td></tr></table></figure><h2 id="3-在子视图中获取父控制器、父视图"><a href="#3-在子视图中获取父控制器、父视图" class="headerlink" title="3. 在子视图中获取父控制器、父视图"></a>3. 在子视图中获取父控制器、父视图</h2><h4 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">获取父控制器</span><br><span class="line"></span><br><span class="line">@param view 当前视图</span><br><span class="line">@param className 需要获取的控制器名称</span><br><span class="line">@return 返回控制器对象</span><br><span class="line">*/</span><br><span class="line">- (UIViewController *)LCZGetSuperViewController:(UIView *)currentview superViewControllerClassName:(NSString *)className</span><br><span class="line">&#123;</span><br><span class="line">    for (UIView* next = [current superview]; next; next = next.superview) &#123;</span><br><span class="line">    UIResponder *nextResponder = [next nextResponder];</span><br><span class="line">        if ([nextResponder isKindOfClass:[NSClassFromString(className) class]]) &#123;</span><br><span class="line">            return (UIViewController *)nextResponder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">获取当前视图中的目标父视图</span><br><span class="line"></span><br><span class="line">@param currentView 当前视图</span><br><span class="line">@param superView 父视图</span><br><span class="line">@return 父视图对象</span><br><span class="line">*/</span><br><span class="line">- (UIView *)LCZGetSuperView:(UIView *)currentView superView:(UIView *)superView &#123;</span><br><span class="line">    UIView *view = currentView.superview;</span><br><span class="line">    while (![view isKindOfClass:[superView class]]) &#123;</span><br><span class="line">        if (view.superview == nil) &#123;</span><br><span class="line">            return nil;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        view = [view superview];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/// 通过当前视图获取父视图的控制器</span><br><span class="line">///</span><br><span class="line">/// - Parameters:</span><br><span class="line">///   - currentView: 当前视图</span><br><span class="line">///   - viewController: 需要获取到的控制器</span><br><span class="line">/// - Returns: 返回控制器</span><br><span class="line">func LCZGetSuperViewController&lt;T: UIViewController&gt;(currentView:UIView, viewController: T.Type) -&gt; T? &#123;</span><br><span class="line">    var view: UIView = currentView.superview!</span><br><span class="line">    while view.next!.isKind(of: T.self) != true &#123;</span><br><span class="line">        guard view.superview != nil else &#123;</span><br><span class="line">            return nil</span><br><span class="line">        &#125;</span><br><span class="line">        view = view.superview!</span><br><span class="line">    &#125;</span><br><span class="line">    return view.next as? T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 获取当前视图中的目标父视图</span><br><span class="line">///</span><br><span class="line">/// - Parameters:</span><br><span class="line">///   - currentView: 当前视图</span><br><span class="line">///   - superView: 目标父视图</span><br><span class="line">/// - Returns: 返回父视图</span><br><span class="line">public func LCZGetSuperView&lt;T: UIView&gt;(currentView: UIView, superView: T.Type) -&gt; T? &#123;</span><br><span class="line">    var view: UIView = currentView.superview!</span><br><span class="line">    while view.isKind(of: T.self) != true &#123;</span><br><span class="line">        guard view.superview != nil else &#123;</span><br><span class="line">            return nil</span><br><span class="line">        &#125;</span><br><span class="line">        view = view.superview!</span><br><span class="line">        &#125;</span><br><span class="line">    return view as? T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Masonry优先完全显示内容、抵抗压缩"><a href="#4-Masonry优先完全显示内容、抵抗压缩" class="headerlink" title="4. Masonry优先完全显示内容、抵抗压缩"></a>4. Masonry优先完全显示内容、抵抗压缩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 优先完全显示内容</span><br><span class="line">[self.titleLabel setContentHuggingPriority:UILayoutPriorityRequired forAxis:UILayoutConstraintAxisHorizontal];</span><br><span class="line">// 抵抗压缩</span><br><span class="line">[self.titleLabel setContentCompressionResistancePriority:UILayoutPriorityRequired forAxis:UILayoutConstraintAxisHorizontal];</span><br></pre></td></tr></table></figure><h2 id="5-SnapKit优先完全显示内容、抵抗压缩"><a href="#5-SnapKit优先完全显示内容、抵抗压缩" class="headerlink" title="5. SnapKit优先完全显示内容、抵抗压缩"></a>5. SnapKit优先完全显示内容、抵抗压缩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.title.setContentHuggingPriority(.required, for: .horizontal)</span><br><span class="line">self.title.setContentCompressionResistancePriority(.required, for: .horizontal)</span><br></pre></td></tr></table></figure><h2 id="6-UITableView自适应高度"><a href="#6-UITableView自适应高度" class="headerlink" title="6. UITableView自适应高度"></a>6. UITableView自适应高度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.homeTableView.estimatedRowHeight = 44</span><br><span class="line">self.homeTableView.rowHeight = UITableViewAutomaticDimension;</span><br></pre></td></tr></table></figure><h2 id="7-GCD单例"><a href="#7-GCD单例" class="headerlink" title="7. GCD单例"></a>7. GCD单例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)shared &#123;</span><br><span class="line">    static Share *shared = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        shared = [[Share alloc]init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return shared;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录点常用方法、属性以及遇到的问题&lt;/p&gt;
&lt;h2 id=&quot;1-GCD信号量&quot;&gt;&lt;a href=&quot;#1-GCD信号量&quot; class=&quot;headerlink&quot; title=&quot;1. GCD信号量&quot;&gt;&lt;/a&gt;1. GCD信号量&lt;/h2&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS XcodeBuild打包ipa</title>
    <link href="http://yoursite.com/2019/03/04/2019-3-04%20XcodeBuild%E6%89%93%E5%8C%85ipa/"/>
    <id>http://yoursite.com/2019/03/04/2019-3-04 XcodeBuild打包ipa/</id>
    <published>2019-03-04T02:07:13.000Z</published>
    <updated>2019-04-22T08:26:04.329Z</updated>
    
    <content type="html"><![CDATA[<p>XcodeBuild是一个命令行工具，可以用来对Xcode工程或工作区进行编译、查找、分析、测试等各种操作</p><h2 id="1-进入项目的目录"><a href="#1-进入项目的目录" class="headerlink" title="1. 进入项目的目录"></a>1. 进入项目的目录</h2><p><code>$ cd /Users/tanitsubukousha/Desktop/GLGL</code>   /Users/tanitsubukousha/Desktop/GLGL: 为你的项目路径</p><h2 id="2-清除编译过程生成的文件"><a href="#2-清除编译过程生成的文件" class="headerlink" title="2. 清除编译过程生成的文件"></a>2. 清除编译过程生成的文件</h2><p><code>$ xcodebuild clean -$workspace $project_Name.$projectType -scheme $project_Name -configuration $configuration</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$workspace:  project / workspace（CocoaPods）</span><br><span class="line">$project_Name: 项目名称</span><br><span class="line">$projectType:  xcodeproj / xcworkspace（CocoaPods）</span><br><span class="line">$configuration:  Debug / Release</span><br></pre></td></tr></table></figure></p><p>出现<code>** CLEAN SUCCEEDED **</code> 则清除成功</p><h2 id="3-生成-xcarchive-文件"><a href="#3-生成-xcarchive-文件" class="headerlink" title="3. 生成 .xcarchive 文件"></a>3. 生成 .xcarchive 文件</h2><p><code>$ xcodebuild archive -$workspace $project_Name.$projectType -scheme $project_Name -archivePath ./$project_Name.xcarchive</code><br>执行完后目录下会生成 <code>$project_Name.xcarchive</code> 文件。</p><h2 id="4-配置plist文件"><a href="#4-配置plist文件" class="headerlink" title="4. 配置plist文件"></a>4. 配置plist文件</h2><p>在当前目录下创建一个<code>app-store.plist</code>    appstore: 自定义名称<br>内容如下<br><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-3-04 XcodeBuild打包ipa/app-store.png?raw=true" alt="markdown" title="app-store"><br>4.1关于method内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app-store,   #AppStore正式生产环境包</span><br><span class="line">ad-hoc,  #生产测试包</span><br><span class="line">enterprise,  #企业包</span><br><span class="line">development  #开发测试包</span><br></pre></td></tr></table></figure></p><h2 id="5-打包ipa"><a href="#5-打包ipa" class="headerlink" title="5. 打包ipa"></a>5. 打包ipa</h2><p><code>$ xcodebuild -exportArchive -exportOptionsPlist app-store.plist -archivePath ./$project_Name.xcarchive -exportPath ./autoPackage -allowProvisioningUpdates</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app-store.plist 创建的pislt文件</span><br><span class="line">./autoPackage  ipa存放的路径</span><br></pre></td></tr></table></figure></p><p>打包成功 会在当前目录生成一个<code>autoPackage</code>文件夹<br><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-3-04 XcodeBuild打包ipa/ipa.png?raw=true" alt="markdown" title="ipa"></p><h2 id="6-打包脚本"><a href="#6-打包脚本" class="headerlink" title="6. 打包脚本"></a>6. 打包脚本</h2><p><a href="https://github.com/lczalh/XcodeprojShell" title="XcodeprojShell" target="_blank" rel="noopener">XcodeprojShell</a> </p><p>使用方法：</p><h3 id="6-1-将以下文件放入项目目录"><a href="#6-1-将以下文件放入项目目录" class="headerlink" title="6.1 将以下文件放入项目目录"></a>6.1 将以下文件放入项目目录</h3><p><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-3-04 XcodeBuild打包ipa/脚本.png?raw=true" alt="markdown" title="脚本"></p><h3 id="6-2-进入项目的目录"><a href="#6-2-进入项目的目录" class="headerlink" title="6.2 进入项目的目录"></a>6.2 进入项目的目录</h3><p><code>$ cd 你的项目路径</code></p><h3 id="6-3-运行脚本"><a href="#6-3-运行脚本" class="headerlink" title="6.3 运行脚本"></a>6.3 运行脚本</h3><p><code>$ ./XcodeprojShell.sh</code> 根据提示操作即可</p><h2 id="7-远程打包（-必须每次先获取keychain的访问权限）"><a href="#7-远程打包（-必须每次先获取keychain的访问权限）" class="headerlink" title="7. 远程打包（ 必须每次先获取keychain的访问权限）"></a>7. 远程打包（ 必须每次先获取<code>keychain</code>的访问权限）</h2><p><code>$ security unlock-keychain -p $password /Users/$userName/Library/Keychains/Login.keychain</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$userName 主机用户名</span><br><span class="line">$password 主机密码</span><br></pre></td></tr></table></figure></p><h2 id="8-对应用重签名"><a href="#8-对应用重签名" class="headerlink" title="8. 对应用重签名"></a>8. 对应用重签名</h2><h3 id="8-1-将得到的ceshi-ipa-进行解压-unzip-ceshi-ipa"><a href="#8-1-将得到的ceshi-ipa-进行解压-unzip-ceshi-ipa" class="headerlink" title="8.1 将得到的ceshi.ipa 进行解压  $ unzip ceshi.ipa"></a>8.1 将得到的ceshi.ipa 进行解压  <code>$ unzip ceshi.ipa</code></h3><h3 id="8-2-删除旧签名-rm-rf-Payload-ceshi-app-CodeSignature"><a href="#8-2-删除旧签名-rm-rf-Payload-ceshi-app-CodeSignature" class="headerlink" title="8.2 删除旧签名 $ rm -rf Payload/ceshi.app/_CodeSignature/"></a>8.2 删除旧签名 <code>$ rm -rf Payload/ceshi.app/_CodeSignature/</code></h3><h3 id="8-3-将-codesign-d-entitlements-Payload-XXX-app-命令打印的内容-创建entitlements-plist文件"><a href="#8-3-将-codesign-d-entitlements-Payload-XXX-app-命令打印的内容-创建entitlements-plist文件" class="headerlink" title="8.3 将 $ codesign -d --entitlements - Payload/XXX.app 命令打印的内容,创建entitlements.plist文件"></a>8.3 将 <code>$ codesign -d --entitlements - Payload/XXX.app</code> 命令打印的内容,创建entitlements.plist文件</h3><h3 id="8-4-签名-codesign-f-s-quot-iPhone-Distribution-XXX-quot-entitlements-entitlements-plist-Payload-ceshi-app"><a href="#8-4-签名-codesign-f-s-quot-iPhone-Distribution-XXX-quot-entitlements-entitlements-plist-Payload-ceshi-app" class="headerlink" title="8.4 签名 codesign -f -s &quot;iPhone Distribution: XXX&quot; --entitlements entitlements.plist Payload/ceshi.app"></a>8.4 签名 <code>codesign -f -s &quot;iPhone Distribution: XXX&quot; --entitlements entitlements.plist Payload/ceshi.app</code></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;XcodeBuild是一个命令行工具，可以用来对Xcode工程或工作区进行编译、查找、分析、测试等各种操作&lt;/p&gt;
&lt;h2 id=&quot;1-进入项目的目录&quot;&gt;&lt;a href=&quot;#1-进入项目的目录&quot; class=&quot;headerlink&quot; title=&quot;1. 进入项目的目录&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS Fastlane自动化打包ipa</title>
    <link href="http://yoursite.com/2019/02/28/2019-2-28%20Fastlane%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2019/02/28/2019-2-28 Fastlane自动化打包/</id>
    <published>2019-02-28T10:00:41.000Z</published>
    <updated>2019-04-22T08:26:04.328Z</updated>
    
    <content type="html"><![CDATA[<p>Fastlane是一套使用Ruby写的自动化工具集，旨在简化Android和iOS的部署过程，自动化你的工作流。它可以简化一些乏味、单调、重复的工作，像截图、代码签名以及发布App。<a href="https://docs.fastlane.tools/" title="Fastlane文档" target="_blank" rel="noopener">Fastlane文档</a></p><h2 id="1-安装Xcode命令行工具"><a href="#1-安装Xcode命令行工具" class="headerlink" title="1. 安装Xcode命令行工具"></a>1. 安装Xcode命令行工具</h2><p>安装命令: <code>$ xcode-select --install</code><br>提示: <code>xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</code>  表示已经安装</p><h2 id="2-安装Fastlane"><a href="#2-安装Fastlane" class="headerlink" title="2. 安装Fastlane"></a>2. 安装Fastlane</h2><p>安装命令: <code>$ sudo gem install fastlane -NV</code> 或 <code>brew cask install fastlane</code><br>检查是否安装成功 <code>fastlane --version</code></p><h2 id="3-初始化Fastlane"><a href="#3-初始化Fastlane" class="headerlink" title="3. 初始化Fastlane"></a>3. 初始化Fastlane</h2><p>cd到项目路径：<code>$ cd /Users/tanitsubukousha/Desktop/GLGL</code><br>初始化Fastlane：<code>$ fastlane init</code><br><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-28 Fastlane自动化打包/fastlane初始化.png?raw=true" alt="markdown" title="Fastlane初始化"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 📸  Automate screenshots (自动化截图)</span><br><span class="line">2. 👩‍✈️  Automate beta distribution to TestFlight (自动testfilght型配置)</span><br><span class="line">3. 🚀  Automate App Store distribution (自动发布型配置)</span><br><span class="line">4. 🛠  Manual setup - manually setup your project to automate your (需要手动配置内容)</span><br></pre></td></tr></table></figure></p><p>我这里选择 4  等待一下会让你按回车 (共三次)  即安装成功！<br>在项目中会生成 fastlane文件夹、Gemfile、Gemfile.lock<br>fastlane文件夹：Appfile (存储有关开发者账号相关信息)、Fastfile (核心文件，主要用于 命令行调用和处理具体的流程)</p><h2 id="4-文件配置"><a href="#4-文件配置" class="headerlink" title="4. 文件配置"></a>4. 文件配置</h2><h3 id="4-1-打开Appfile文件-修改以下配置"><a href="#4-1-打开Appfile文件-修改以下配置" class="headerlink" title="4.1 打开Appfile文件 修改以下配置"></a>4.1 打开Appfile文件 修改以下配置</h3><p><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-28 Fastlane自动化打包/Appfile.png?raw=true" alt="markdown" title="Appfile"></p><h3 id="4-2-打开Fastfile文件-修改以下配置"><a href="#4-2-打开Fastfile文件-修改以下配置" class="headerlink" title="4.2 打开Fastfile文件 修改以下配置"></a>4.2 打开Fastfile文件 修改以下配置</h3><p><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-28 Fastlane自动化打包/Fastfile.png?raw=true" alt="markdown" title="Fastfile"></p><h3 id="4-3-关于export-method方法"><a href="#4-3-关于export-method方法" class="headerlink" title="4.3 关于export_method方法"></a>4.3 关于export_method方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app-store,   #AppStore正式生产环境包</span><br><span class="line">ad-hoc,  #生产测试包</span><br><span class="line">enterprise,  #企业包</span><br><span class="line">development  #开发测试包</span><br></pre></td></tr></table></figure><h2 id="5-证书管理插件"><a href="#5-证书管理插件" class="headerlink" title="5. 证书管理插件"></a>5. 证书管理插件</h2><p>match是fastlane的一个功能组件, 能自动从苹果官方上下载证书和pp文件同步到我们的git仓库中<br>cd到项目路径：<code>$ cd /Users/tanitsubukousha/Desktop/GLGL</code><br>安装命令: <code>$ fastlane match init</code><br><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-28 Fastlane自动化打包/match.png?raw=true" alt="markdown" title="match"></p><h3 id="5-1-先删除旧证书和pp文件"><a href="#5-1-先删除旧证书和pp文件" class="headerlink" title="5.1 先删除旧证书和pp文件"></a>5.1 先删除旧证书和pp文件</h3><p>分别执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ fastlane match nuke development</span><br><span class="line">$ fastlane match nuke distribution</span><br></pre></td></tr></table></figure></p><h3 id="5-2-生成证书和pp文件"><a href="#5-2-生成证书和pp文件" class="headerlink" title="5.2 生成证书和pp文件"></a>5.2 生成证书和pp文件</h3><p>cd到项目路径：<code>$ cd /Users/tanitsubukousha/Desktop/GLGL</code><br>分别执行以下命令（首次执行时,会要求输入Git仓库密码,用来对证书进行加密,后续其他机器获取证书时使用该密码进行解密）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fastlane match development</span><br><span class="line">$ fastlane match adhoc</span><br><span class="line">$ fastlane match appstore</span><br></pre></td></tr></table></figure></p><h2 id="6-打包ipa"><a href="#6-打包ipa" class="headerlink" title="6. 打包ipa"></a>6. 打包ipa</h2><p>打包命: <code>$ fastlane test</code>  test是Fastfile文件中的lane名称<br><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-28 Fastlane自动化打包/ipa.png?raw=true" alt="markdown" title="ipa"></p><h2 id="7-问题"><a href="#7-问题" class="headerlink" title="7. 问题"></a>7. 问题</h2><h3 id="7-1-Automatic-signing-is-disabled-and-unable-to-generate-a-profile-To-enable-automatic-signing-pass-allowProvisioningUpdates-to-xcodebuild"><a href="#7-1-Automatic-signing-is-disabled-and-unable-to-generate-a-profile-To-enable-automatic-signing-pass-allowProvisioningUpdates-to-xcodebuild" class="headerlink" title="7.1 Automatic signing is disabled and unable to generate a profile. To enable automatic signing, pass -allowProvisioningUpdates to xcodebuild."></a>7.1 <code>Automatic signing is disabled and unable to generate a profile. To enable automatic signing, pass -allowProvisioningUpdates to xcodebuild.</code></h3><p>Xcode 9 之后禁止其直接访问钥匙串, 导致持续集成时执行 xcode build 会出现找不到证书或证书配置文件。修改 fastlane 配置文件来解决<br><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-28 Fastlane自动化打包/7.1问题.png?raw=true" alt="markdown" title="7.1问题"><br><code>export_xcargs: &quot;-allowProvisioningUpdates&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Fastlane是一套使用Ruby写的自动化工具集，旨在简化Android和iOS的部署过程，自动化你的工作流。它可以简化一些乏味、单调、重复的工作，像截图、代码签名以及发布App。&lt;a href=&quot;https://docs.fastlane.tools/&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>mac OS 搭建Hexo个人博客</title>
    <link href="http://yoursite.com/2019/02/11/2019-2-12%20hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/11/2019-2-12 hexo搭建/</id>
    <published>2019-02-11T10:00:41.000Z</published>
    <updated>2019-04-22T08:26:04.328Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/zh-cn/docs/" title="Hexo文档" target="_blank" rel="noopener">Hexo文档</a></p><h2 id="1-博客效果图"><a href="#1-博客效果图" class="headerlink" title="1. 博客效果图"></a>1. 博客效果图</h2><p><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-11 hexo搭建/博客效果.png?raw=true" alt="markdown" title="博客效果"></p><h2 id="2-创建GitHub仓库"><a href="#2-创建GitHub仓库" class="headerlink" title="2. 创建GitHub仓库"></a>2. 创建GitHub仓库</h2><p><img src="https://github.com/lczalh/blog/blob/master/source/images/2019-2-11 hexo搭建/创建仓库.png?raw=true" alt="markdown" title="创建仓库"></p><p><strong> Respository name 中的lczalh.github.io 的lczalh 一定与前面的Owner 一致 </strong></p><h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3. 安装Node.js"></a>3. 安装Node.js</h2><p><a href="https://nodejs.org/en/" title="Node.js下载" target="_blank" rel="noopener">Node.js下载</a><br>验证是否安装: <code>$ node -v</code></p><h2 id="4-安装Git"><a href="#4-安装Git" class="headerlink" title="4. 安装Git"></a>4. 安装Git</h2><p><code>$ brew install git</code><br>验证是否安装:  <code>$ git --version</code></p><h2 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5. 安装Hexo"></a>5. 安装Hexo</h2><p><code>$ sudo npm install hexo-cli -g</code></p><h2 id="6-创建博客"><a href="#6-创建博客" class="headerlink" title="6. 创建博客"></a>6. 创建博客</h2><p><code>$ hexo init lczalh.github.io</code>                          <code>lczalh.github.io</code>为文件夹名称 可自定义<br>执行成功后，会创建出一个名为 <code>lczalh.github.io</code> 的文件夹</p><p><strong> 基础配置: 打开文件位置 <code>lczalh.github.io/_config.yml</code> </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: lczalh    // 博客名称</span><br><span class="line">author: Liu Chao Zheng  // 你的名字</span><br><span class="line">language: zh-Hans    // 中文</span><br><span class="line">theme: new-vno   // 主题名称</span><br><span class="line">deploy:</span><br><span class="line">  type: git    // Git发布</span><br><span class="line">  repo: https://github.com/lczalh/lczalh.github.io.git    // 刚才创建的Github仓库</span><br></pre></td></tr></table></figure></p><h2 id="7-更改主题"><a href="#7-更改主题" class="headerlink" title="7. 更改主题"></a>7. 更改主题</h2><p>进入上一步创建的文件夹: <code>$ cd lczalh.github.io</code><br>安装主题: <code>$ git clone https://github.com/monniya/hexo-theme-new-vno.git themes/new-vno</code> </p><p><a href="https://github.com/monniya/hexo-theme-new-vno" title="主题配置" target="_blank" rel="noopener">主题配置</a>                     <a href="https://hexo.io/themes/" title="更多主题" target="_blank" rel="noopener">更多主题</a></p><h2 id="8-写博客"><a href="#8-写博客" class="headerlink" title="8. 写博客"></a>8. 写博客</h2><p>博客路径: <code>lczalh.github.io/source/_posts</code> 在这里创建你的第一篇博客 例如创建: <strong> 2019-2-12 hexo搭建.md </strong>  内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: &quot;mac OS 搭建Hexo个人博客&quot;</span><br><span class="line">date: 2019-02-11 18:00:41</span><br><span class="line">tags: 博客</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。[Hexo文档](https://hexo.io/zh-cn/docs/ &quot;Hexo文档&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="9-测试是否正常"><a href="#9-测试是否正常" class="headerlink" title="9. 测试是否正常"></a>9. 测试是否正常</h2><p>启动测试服务: <code>$ hexo s</code>  在浏览器中输入<a href="在浏览器中输入https://localhost:4000 访问">https://localhost:4000</a> 访问</p><h2 id="10-安装自动部署发布工具"><a href="#10-安装自动部署发布工具" class="headerlink" title="10. 安装自动部署发布工具"></a>10. 安装自动部署发布工具</h2><p><code>$ sudo npm install hexo-deployer-git --save</code></p><h2 id="11-发布博客"><a href="#11-发布博客" class="headerlink" title="11. 发布博客"></a>11. 发布博客</h2><p>切换到root用户(有权限，跳过此行): <code>$ sudo -s</code><br>发布博客: <code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p><strong> 每次写完博客，执行下这两个命令就可以了 </strong></p><h2 id="12-错误"><a href="#12-错误" class="headerlink" title="12. 错误"></a>12. 错误</h2><p><strong> 1.WARN No layout: index.html </strong><br>解决方案: 安装/更新主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd lczalh.github.io</span><br><span class="line">$ git clone https://github.com/monniya/hexo-theme-new-vno.git themes/new-vno</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; title=&quot;Hexo文档&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
